plugins {
    id 'java'
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
}



///////////////////
public class Question {
    private String description;
    private String[] options;
    private int correctOption;

    public Question(String description, String[] options, int correctOption) {
        this.description = description;
        this.options = options;
        this.correctOption = correctOption;
    }

    // Getters para los atributos
}
///////////////

import java.util.Scanner;

public class Quiz {
    private Question[] questions;
    private Scanner scanner;

    public Quiz(Question[] questions) {
        this.questions = questions;
        this.scanner = new Scanner(System.in);
    }

    public void startGame() {
        System.out.println("Bienvenido al Juego de Trivia!");
        System.out.println("Responde las siguientes preguntas seleccionando el número de la opción correcta.");

        int score = 0;

        for (int i = 0; i < questions.length; i++) {
            System.out.println("Pregunta " + (i + 1) + ": " + questions[i].getDescription());
            for (int j = 0; j < questions[i].getOptions().length; j++) {
                System.out.println((j + 1) + ") " + questions[i].getOptions()[j]);
            }
            System.out.print("Tu respuesta: ");
            int userAnswer = scanner.nextInt();
            if (userAnswer == questions[i].getCorrectOption()) {
                System.out.println("¡Correcto!");
                score++;
            } else {
                System.out.println("Incorrecto.");
            }
        }

        System.out.println("Juego terminado. Aquí está tu puntuación:");
        System.out.println("Preguntas contestadas: " + questions.length);
        System.out.println("Respuestas correctas: " + score);
        System.out.println("Respuestas incorrectas: " + (questions.length - score));
    }
}
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class QuizTest {
    @Test
    void testScoreCalculation() {
        Question[] questions = {
            new Question("¿Cuál es la capital de Francia?", new String[]{"Madrid", "Londres", "París", "Berlín"}, 3),
            // Agrega más preguntas para probar
        };
        Quiz quiz = new Quiz(questions);

        // Simular respuestas correctas e incorrectas para calcular la puntuación
        // Ajusta según sea necesario para tus pruebas
        assertEquals(7, quiz.calculateScore(new int[]{3, 2, 1, 4, 3, 2, 3, 1, 2, 3}));
    }
}

////////////////////////
public class Question {
    private String description;
    private String[] options;
    private int correctOptionIndex;

    public Question(String description, String[] options, int correctOptionIndex) {
        this.description = description;
        this.options = options;
        this.correctOptionIndex = correctOptionIndex;
    }

    public String getDescription() {
        return description;
    }

    public String[] getOptions() {
        return options;
    }

    public int getCorrectOptionIndex() {
        return correctOptionIndex;
    }
}
import java.util.Scanner;

public class Quiz {
    private Question[] questions;
    private int score;

    public Quiz(Question[] questions) {
        this.questions = questions;
        this.score = 0;
    }

    public void start() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Bienvenido al Juego de Trivia!");
        System.out.println("Responde las siguientes preguntas seleccionando el número de la opción correcta.");

        for (int i = 0; i < questions.length; i++) {
            System.out.println("Pregunta " + (i + 1) + ": " + questions[i].getDescription());
            String[] options = questions[i].getOptions();
            for (int j = 0; j < options.length; j++) {
                System.out.println((j + 1) + ") " + options[j]);
            }
            System.out.print("Tu respuesta:
////////////////////
import java.util.Scanner;

public class Quiz {
    private Question[] questions;
    private int score;

    public Quiz(Question[] questions) {
        this.questions = questions;
        this.score = 0;
    }

    public void start() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Bienvenido al Juego de Trivia!");
        System.out.println("Responde las siguientes preguntas seleccionando el número de la opción correcta.");

        for (int i = 0; i < questions.length; i++) {
            System.out.println("Pregunta " + (i + 1) + ": " + questions[i].getDescription());
            String[] options = questions[i].getOptions();
            for (int j = 0; j < options.length; j++) {
                System.out.println((j + 1) + ") " + options[j]);
            }
            System.out.print("Tu respuesta: ");
            int userChoice = scanner.nextInt();
            if (userChoice == questions[i].getCorrectOptionIndex() + 1) {
                System.out.println("¡Correcto!");
                score++;
            } else {
                System.out.println("Incorrecto. La respuesta correcta era la opción " + (questions[i].getCorrectOptionIndex() + 1));
            }
        }

        System.out.println("Juego terminado. Aquí está tu puntuación:");
        System.out.println("Preguntas contestadas: " + questions.length);
        System.out.println("Respuestas correctas: " + score);
        System.out.println("Respuestas incorrectas: " + (questions.length - score));
    }
}
////////////////

Para escribir las pruebas unitarias usando JUnit, vamos a asegurarnos de cubrir los casos de prueba mencionados:

Verificar que la carga de preguntas desde un repositorio o archivo esté correcta.
Asegurar que el sistema acepte y valide respuestas de manera adecuada, incluyendo la captura de entradas inválidas como letras o números fuera del rango.
Aquí tienes un ejemplo de cómo podrían ser estas pruebas:

Pruebas unitarias para la clase Quiz:
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class QuizTest {
    @Test
    public void testQuestionLoading() {
        Question[] questions = {
                new Question("¿Cuál es la capital de Francia?", new String[]{"Madrid", "Londres", "París", "Berlín"}, 2),
                new Question("¿Cuál es el animal terrestre más grande?", new String[]{"Elefante", "Jirafa", "Rinoceronte", "Ballena Azul"}, 0)
        };

        Quiz quiz = new Quiz(questions);
        assertNotNull(quiz, "El objeto de Quiz no debería ser nulo");

        assertEquals(2, quiz.getQuestions().length, "El número de preguntas cargadas debería ser 2");
    }

    @Test
    public void testAnswerValidation() {
        Question[] questions = {
                new Question("¿Cuál es la capital de Francia?", new String[]{"Madrid", "Londres", "París", "Berlín"}, 2),
                new Question("¿Cuál es el animal terrestre más grande?", new String[]{"Elefante", "Jirafa", "Rinoceronte", "Ballena Azul"}, 0)
        };

        Quiz quiz = new Quiz(questions);

        // Simular respuestas del usuario
        int[] userAnswers = {3, 1};

        quiz.start(userAnswers); // Simular el juego con las respuestas del usuario

        assertEquals(1, quiz.getScore(), "La puntuación debería ser 1");
    }
}
////////////////////
Prueba a la clase question
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class QuestionTest {
    @Test
    public void testQuestionCreation() {
        String description = "¿Cuál es la capital de Francia?";
        String[] options = {"Madrid", "Londres", "París", "Berlín"};
        int correctOptionIndex = 2;

        Question question = new Question(description, options, correctOptionIndex);

        assertNotNull(question, "El objeto de pregunta no debería ser nulo");
        assertEquals(description, question.getDescription(), "La descripción de la pregunta debería ser correcta");
        assertArrayEquals(options, question.getOptions(), "Las opciones de respuesta deberían ser correctas");
        assertEquals(correctOptionIndex, question.getCorrectOptionIndex(), "El índice de la opción correcta debería ser correcto");
    }
}
